# Generated by Django 2.0.2 on 2020-02-19 03:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('powerdns_manager', '0006_auto_20151018_0256'),
    ]

    operations = [
        migrations.AlterField(
            model_name='comment',
            name='account',
            field=models.CharField(help_text='Account name (???)', max_length=40, verbose_name='account'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='comment',
            field=models.CharField(help_text='Comment body.', max_length=64000, verbose_name='comment'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='modified_at',
            field=models.PositiveIntegerField(help_text='Timestamp for the last modification time.', verbose_name='modified at'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='name',
            field=models.CharField(help_text='Enter a name for this comment.', max_length=255, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='comment',
            name='type',
            field=models.CharField(help_text='Select the type of this comment.', max_length=10, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='cryptokey',
            name='active',
            field=models.BooleanField(default=False, help_text='Check to activate key.', verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='cryptokey',
            name='content',
            field=models.TextField(blank=True, help_text='Enter the key data.', null=True, verbose_name='content'),
        ),
        migrations.AlterField(
            model_name='cryptokey',
            name='flags',
            field=models.PositiveIntegerField(help_text='Key flags.', verbose_name='flags'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='account',
            field=models.CharField(blank=True, help_text='Determine if a certain host is a supermaster for a certain domain name. (???)', max_length=40, null=True, verbose_name='account'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='created_by',
            field=models.ForeignKey(help_text='The Django user this zone belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='powerdns_manager_domain_created_by', to=settings.AUTH_USER_MODEL, verbose_name='owner username'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='last_check',
            field=models.PositiveIntegerField(help_text='Last time this domain was checked for freshness.', null=True, verbose_name='last check'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='master',
            field=models.CharField(blank=True, help_text='Enter a comma delimited list of nameservers that are master for this domain. This setting applies only to slave zones.', max_length=128, null=True, verbose_name='master'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='name',
            field=models.CharField(db_index=True, help_text='This field is the actual domain name. This is the field that powerDNS matches when it gets a request. The domainname should be in the format of: domainname.TLD (no trailing dot)', max_length=255, unique=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='notified_serial',
            field=models.PositiveIntegerField(help_text='The last notified serial of a master domain. This is updated from the SOA record of the domain.', null=True, verbose_name='notified serial'),
        ),
        migrations.AlterField(
            model_name='domain',
            name='type',
            field=models.CharField(choices=[('NATIVE', 'Native'), ('MASTER', 'Master'), ('SLAVE', 'Slave')], default='NATIVE', help_text='Select the zone type. Native refers to native SQL replication. Master/Slave refers to DNS server based zone transfers.', max_length=6, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='domainmetadata',
            name='content',
            field=models.TextField(blank=True, help_text='Enter the metadata.', null=True, verbose_name='content'),
        ),
        migrations.AlterField(
            model_name='domainmetadata',
            name='kind',
            field=models.CharField(choices=[('ALLOW-AXFR-FROM', 'ALLOW-AXFR-FROM'), ('AXFR-MASTER-TSIG', 'AXFR-MASTER-TSIG'), ('LUA-AXFR-SCRIPT', 'LUA-AXFR-SCRIPT'), ('NSEC3NARROW', 'NSEC3NARROW'), ('NSEC3PARAM', 'NSEC3PARAM'), ('PRESIGNED', 'PRESIGNED'), ('SOA-EDIT', 'SOA-EDIT'), ('TSIG-ALLOW-AXFR', 'TSIG-ALLOW-AXFR')], help_text='Select a setting.', max_length=16, verbose_name='setting'),
        ),
        migrations.AlterField(
            model_name='dynamiczone',
            name='api_key',
            field=models.CharField(help_text='The API key is generated automatically. To reset it, use the relevant action in the changelist view.', max_length=64, null=True, verbose_name='API Key'),
        ),
        migrations.AlterField(
            model_name='dynamiczone',
            name='is_dynamic',
            field=models.BooleanField(default=False, help_text='Check to mark this zone as dynamic. An API key will be generated for you so as to be able to update the A nd AAAA records IP addresses over HTTP.', verbose_name='Dynamic zone'),
        ),
        migrations.AlterField(
            model_name='record',
            name='auth',
            field=models.NullBooleanField(help_text="The 'auth' field should be set to '1' for data for which the zone itself is authoritative, which includes the SOA record and its own NS records. The 'auth' field should be 0 however for NS records which are used for delegation, and also for any glue (A, AAAA) records present for this purpose. Do note that the DS record for a secure delegation should be authoritative!", verbose_name='authoritative'),
        ),
        migrations.AlterField(
            model_name='record',
            name='change_date',
            field=models.PositiveIntegerField(help_text='Timestamp for the last update. This is used by PowerDNS internally.', null=True, verbose_name='change date'),
        ),
        migrations.AlterField(
            model_name='record',
            name='content',
            field=models.CharField(help_text='This is the actual content of a Resource Record. For instance, in case of an A record, this is the IP address.', max_length=64000, null=True, verbose_name='content'),
        ),
        migrations.AlterField(
            model_name='record',
            name='disabled',
            field=models.BooleanField(default=False, help_text='Enable or disable this Resource Record.', verbose_name='disabled'),
        ),
        migrations.AlterField(
            model_name='record',
            name='name',
            field=models.CharField(db_index=True, help_text="Actual name of a record. Must not end in a '.' and be fully qualified - it is not relative to the name of the domain!  For example: www.test.com (no trailing dot)", max_length=255, null=True, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='record',
            name='ordername',
            field=models.CharField(db_index=True, help_text='http://doc.powerdns.com/dnssec-modes.html#dnssec-direct-database', max_length=255, null=True, verbose_name='ordername'),
        ),
        migrations.AlterField(
            model_name='record',
            name='prio',
            field=models.PositiveIntegerField(help_text='For MX records, this should be the priority of the mail exchanger specified.', null=True, verbose_name='priority'),
        ),
        migrations.AlterField(
            model_name='record',
            name='ttl',
            field=models.PositiveIntegerField(blank=True, help_text='The time in seconds the DNS-clients are allowed to cache this record. Also known as Time To Live (TTL).', null=True, verbose_name='TTL'),
        ),
        migrations.AlterField(
            model_name='record',
            name='type',
            field=models.CharField(choices=[('SOA', 'SOA'), ('NS', 'NS'), ('MX', 'MX'), ('A', 'A'), ('AAAA', 'AAAA'), ('CNAME', 'CNAME'), ('PTR', 'PTR'), ('TXT', 'TXT'), ('SPF', 'SPF'), ('SRV', 'SRV'), ('CERT', 'CERT'), ('DNSKEY', 'DNSKEY'), ('DS', 'DS'), ('KEY', 'KEY'), ('NSEC', 'NSEC'), ('RRSIG', 'RRSIG'), ('HINFO', 'HINFO'), ('LOC', 'LOC'), ('NAPTR', 'NAPTR'), ('RP', 'RP'), ('AFSDB', 'AFSDB'), ('SSHFP', 'SSHFP')], db_index=True, help_text='Select the type of the resource record.', max_length=10, null=True, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='supermaster',
            name='account',
            field=models.CharField(blank=True, help_text='Account name (???)', max_length=40, null=True, verbose_name='account'),
        ),
        migrations.AlterField(
            model_name='supermaster',
            name='ip',
            field=models.GenericIPAddressField(help_text='IP address for supermaster (IPv4 or IPv6).', unique=True, verbose_name='IP address'),
        ),
        migrations.AlterField(
            model_name='supermaster',
            name='nameserver',
            field=models.CharField(help_text='Hostname of the supermaster.', max_length=255, unique=True, verbose_name='nameserver'),
        ),
        migrations.AlterField(
            model_name='tsigkey',
            name='algorithm',
            field=models.CharField(choices=[('hmac-md5', 'hmac-md5')], help_text='Select hashing algorithm.', max_length=50, verbose_name='algorithm'),
        ),
        migrations.AlterField(
            model_name='tsigkey',
            name='created_by',
            field=models.ForeignKey(help_text='The Django user this TSIG key belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='powerdns_manager_tsigkey_created_by', to=settings.AUTH_USER_MODEL, verbose_name='created by'),
        ),
        migrations.AlterField(
            model_name='tsigkey',
            name='name',
            field=models.CharField(help_text='Enter a name for the key.', max_length=255, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='tsigkey',
            name='secret',
            field=models.CharField(help_text='Enter the shared secret.', max_length=255, verbose_name='secret'),
        ),
        migrations.AlterField(
            model_name='zonetemplate',
            name='content',
            field=models.TextField(blank=True, help_text='Enter the template content. The placeholder #origin# is expanded to the origin of the zone to which the template is applied.', null=True, verbose_name='content'),
        ),
        migrations.AlterField(
            model_name='zonetemplate',
            name='created_by',
            field=models.ForeignKey(help_text='The Django user this template belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='powerdns_manager_zonetemplate_created_by', to=settings.AUTH_USER_MODEL, verbose_name='template creator'),
        ),
        migrations.AlterField(
            model_name='zonetemplate',
            name='name',
            field=models.CharField(help_text='Enter a name for the template.', max_length=100, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='zonetemplate',
            name='notes',
            field=models.TextField(blank=True, help_text='Space for notes about the template.', null=True, verbose_name='notes'),
        ),
    ]
